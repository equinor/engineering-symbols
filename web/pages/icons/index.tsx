import type { NextPage } from 'next';
import { useState, useEffect } from 'react';
import { useDebouncedCallback } from 'use-debounce';
import Head from 'next/head';
import { Typography, Chip, Button, Card, Search, Slider, Label } from '@equinor/eds-core-react';
import { Icon as EngineeringIcon } from '@equinor/engineering-symbols';
import { HexColorPicker } from 'react-colorful';

import { DialogComponent } from '../../components';
import { capitalizeWords, getGitHubReposResponse } from '../../helpers';

import { IconProps } from '../../types';

import styles from './styles.module.css';

const icons = [
	{
		name: 'arrow-down',
		category: 'shapes',
		connectors: [],
		description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor',
	},
	{
		name: 'arrow-up',
		category: 'awesome',
		connectors: [],
		description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor',
	},
	{
		name: 'arrow-right',
		category: 'awesome',
		connectors: [],
		description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor',
	},
];

const Icons: NextPage = () => {
	const [isOpen, setIsOpen] = useState<boolean>(false);
	const [rotate, setRotate] = useState<number>(0);
	const [appearance, setAppearance] = useState<string>('#000');
	const [selectedIconName, setSelectedIconName] = useState<string>('');

	const [icns, seIcns] = useState<IconProps[]>(icons);
	const [selectedCategory, setSelectedCategory] = useState<string>('');
	const [searchValue, setSearchValue] = useState<string>('');

	const [data, setData] = useState<any>([]);

	const debounceValue = useDebouncedCallback((value) => setSearchValue(value), 1000);

	useEffect(() => {
		const getData = async () => {
			const res = await getGitHubReposResponse();

			setData(res);
		};

		getData();
	}, []);

	useEffect(() => {
		if (searchValue) {
			const searchedValue = icons.filter(({ name }) => name.includes(searchValue));
			seIcns(searchedValue);
		} else {
			seIcns(icons);
		}
	}, [searchValue]);

	useEffect(() => {
		if (!selectedCategory || selectedCategory === 'All') {
			seIcns(icons);
		} else {
			const searchedValue = icons.filter(({ category }) => category === selectedCategory.toLocaleLowerCase());
			seIcns(searchedValue);
		}
	}, [selectedCategory]);

	const onRestCustomize = () => {
		setRotate(0);
		setAppearance('#000');
	};

	const handleOpen = (name: string) => {
		setIsOpen(true);
		setSelectedIconName(name);
	};

	const handleClose = () => {
		setIsOpen(false);
		setSelectedIconName('');
	};

	const counts = icons.reduce((acc: any, curr) => {
		const str = JSON.stringify(curr.category);

		acc[str] = (acc[str] || 0) + 1;
		return acc;
	}, {});
	console.log(89, data);

	return (
		<div className={styles.container}>
			<Head>
				<title>1Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
				<meta name="robots" content="noindex,nofollow" />
			</Head>

			<main className={styles.main}>
				<div id="icon" className={styles.iconsContainer}>
					<div className={styles.categories}>
						<ul>
							<li>
								{/* @ts-ignore: next-line */}
								<Button onClick={() => setSelectedCategory('All')} variant={selectedCategory === 'All' ? '' : 'ghost'}>
									All <Chip>{icons.length}</Chip>
								</Button>
							</li>
							{Object.keys(counts).map((key) => {
								const name = capitalizeWords(key.slice(1, -1));

								return (
									<li key={key}>
										<Button
											/* @ts-ignore: next-line */
											variant={selectedCategory === name[0] ? '' : 'ghost'}
											onClick={() => setSelectedCategory(name[0])}>
											{name} <Chip>{counts[key]}</Chip>
										</Button>
									</li>
								);
							})}
						</ul>
					</div>
					<div className={styles.iconsList}>
						<ul>
							{icns.map(({ name }) => (
								<li key={name}>
									<button onClick={() => handleOpen(name)}>
										<Card>
											<div className={styles.iconsListWrap}>
												<div className={styles.iconsListIcon}>
													<EngineeringIcon
														name={name}
														getPosition={(el: any) => console.log('ops:', el)}
														rotate={rotate}
														appearance={appearance}
													/>
												</div>
												<div className={styles.iconsListContent}>
													<Typography variant="body_short">{name}</Typography>
												</div>
											</div>
										</Card>
									</button>
								</li>
							))}
						</ul>
					</div>
					<div className={styles.customize}>
						<Search
							aria-label="sitewide"
							id="search-normal"
							placeholder="Search"
							onChange={({ target }) => debounceValue(target.value)}
						/>
						<div className={styles.customizeElement}>
							<div className={styles.customizeReset}>
								<Typography variant="body_short" bold>
									Customize
								</Typography>
								<Button color="secondary" onClick={() => onRestCustomize()}>
									Reset
								</Button>
							</div>
						</div>

						<div className={styles.customizeElement}>
							<Label label="Rotation" id="even-simpler-slider" />
							<Slider
								aria-labelledby="even-simpler-slider"
								value={rotate}
								step={1}
								max={359}
								min={0}
								minMaxDots={false}
								minMaxValues={false}
								// @ts-ignore: next-line
								onChange={(el, val) => setRotate(val[0])}
							/>
						</div>

						<div className={styles.customizeElement}>
							<div className={styles.customizeColor}>
								<Typography variant="body_short" bold>
									Color
								</Typography>
								<HexColorPicker color={appearance} onChange={setAppearance} />
							</div>
						</div>
					</div>
				</div>
			</main>

			<footer className={styles.footer}>Footer 2</footer>

			{isOpen && selectedIconName && <DialogComponent onHandleClose={handleClose} selectedName={selectedIconName} icons={icons} />}
		</div>
	);
};

export default Icons;
